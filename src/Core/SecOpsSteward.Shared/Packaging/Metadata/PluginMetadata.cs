using System;
using SecOpsSteward.Plugins;
using SecOpsSteward.Plugins.Configurable;

namespace SecOpsSteward.Shared.Packaging.Metadata
{
    public class PluginMetadata
    {
        /// <summary>
        ///     Information stored to describe a Plugin
        /// </summary>
        /// <param name="plugin">IPlugin to extract Package information from</param>
        public PluginMetadata(IPlugin plugin)
        {
            PluginId = new ChimeraPackageIdentifier(plugin.GenerateId());
            Name = plugin.GetDescriptiveName();
            Author = plugin.GetDescriptiveAuthor();
            Description = plugin.GetDescriptiveDescription();
            Outputs = plugin.GetPossibleResultCodes().ToArray();
            ParameterCollection = plugin.GetConfigurationDescription();
            TransitionInputs = plugin.GetRequiredSharedInputs().ToArray();
            TransitionOutputs = plugin.GetGeneratedSharedOutputs().ToArray();
        }

        public PluginMetadata()
        {
        }

        /// <summary>
        ///     Plugin identifier
        /// </summary>
        public ChimeraPackageIdentifier PluginId { get; set; }

        /// <summary>
        ///     Plugin display name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     Description of what the Plugin does
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        ///     The author of the plugin
        /// </summary>
        public string Author { get; set; }

        /// <summary>
        ///     Parameters used to configure the Package
        /// </summary>
        public ConfigurableObjectParameterCollection ParameterCollection { get; set; } = new();

        /// <summary>
        ///     Get the possible outputs which can happen from running a Plugin
        /// </summary>
        public string[] Outputs { get; set; } = new string[0];

        /// <summary>
        ///     Get the workflow variables generated by this plugin (includes templated strings based on config)
        /// </summary>
        public string[] TransitionOutputs { get; set; } = new string[0];

        /// <summary>
        ///     Get the workflow variables required by this plugin (includes templated strings based on config)
        /// </summary>
        public string[] TransitionInputs { get; set; } = new string[0];

        public void CheckIntegrity()
        {
            if (PluginId.Id == Guid.Empty) throw new Exception("Plugin ID Empty");
            if (string.IsNullOrEmpty(Name)) throw new Exception($"[{PluginId}] Plugin name not present");
            if (Outputs.Length == 0) throw new Exception($"[{PluginId}] Plugin outputs not specified");
        }

        public override string ToString()
        {
            return $"Plugin ID {PluginId} ({Name}) with {ParameterCollection.Parameters.Count} inputs";
        }
    }
}