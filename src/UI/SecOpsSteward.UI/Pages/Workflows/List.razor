@page "/workflows/list"
@using SecOpsSteward.Shared.Cryptography
@using SecOpsSteward.Shared.Messages
@using SecOpsSteward.Data.Workflow
@using SecOpsSteward.UI.Pages.Workflows.Dialogs

<MudContainer MaxWidth="MaxWidth.Large">
    <h3>Workflows</h3>
    <MudGrid>
        <MudItem md="12">
            <MudPaper Elevation="2" Class="p-0">
                <MudTable @ref="_table" Items="@Workflows" Hover="true" Striped="true">
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<WorkflowModel, object>(x=>x.WorkflowId)">Workflow ID</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<WorkflowModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<WorkflowModel, object>(x=>x.LastModified)">Last Modified</MudTableSortLabel></MudTh>
                        <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<WorkflowModel, object>(x=>x.IsLocked)">Locked</MudTableSortLabel></MudTh>
                        <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<WorkflowModel, object>(x=>x.IsAgentSetGranted)">Grants</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Actions">
                            @if (!context.IsLocked)
                            {
                                <MudIconButton Color="@Color.Primary" Icon="@Icons.Material.Filled.Edit" Title="Edit" Link="@("/workflows/composer/"+context.WorkflowId)" />
                            }
                            <MudIconButton Color="@Color.Tertiary" Icon="@Icons.Material.Filled.Preview" Title="Edit" Link="@("/workflows/list/"+context.WorkflowId)" />
                            @if (!DbContext.WorkflowExecutions.Any(e => e.WorkflowId == context.WorkflowId))
                            {
                                <MudIconButton Color="@Color.Warning" Icon="@Icons.Material.Filled.Delete" Title="Edit" OnClick="@(() => DeleteWorkflow(context))" /> 
                            }
                        </MudTd>
                        <MudTd DataLabel="Workflow ID">
                            <MudTooltip Text="@context.WorkflowId.ToString()">
                                @context.WorkflowId.ShortId()
                            </MudTooltip>
                        </MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Last Modified">@context.LastModified.DateTime</MudTd>
                        <MudTd DataLabel="Locked" Style="text-align:center">
                            @{ 
                                var color = context.IsLocked ? Color.Success : Color.Warning;
                                var icon = context.IsLocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen;
                                var outlined = context.IsLocked ? Variant.Text : Variant.Outlined;
                            }
                            <MudIconButton Color="@color" Icon="@icon" Variant="@outlined" OnClick="@(() => LockWorkflow(context))" />
                        </MudTd>
                        <MudTd DataLabel="Grants" Style="text-align:center">
                            @{
                                var color = context.IsAgentSetGranted ? Color.Success : Color.Error;
                                var icon = context.IsAgentSetGranted ? Icons.Material.Filled.ThumbUp : Icons.Material.Filled.ThumbDown;
                                var outlined = context.IsAgentSetGranted ? Variant.Text : Variant.Outlined;
                            }
                            <MudIconButton Color="@color" Icon="@icon" Variant="@outlined" Link="@("/workflows/grants/"+context.WorkflowId)" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
                    </PagerContent>
				</MudTable>
			</MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Inject] protected ICryptographicService CryptoService { get; set; }
    private MudTable<WorkflowModel> _table;

    protected List<WorkflowModel> Workflows { get; set; } = new List<WorkflowModel>();

    protected override async Task OnInitializedAsync()
    {
        Workflows = await DbContext.Workflows.ToListAsync();
    }

    protected async Task LockWorkflow(WorkflowModel model)
    {
        if (model.IsLocked) return;
        var dlg = DialogService.Show<LockApprovalDialog>("Lock Workflow?");
        var result = await dlg.Result;

        if (result.Cancelled || (bool)result.Data != true) return;

        DbContext.Attach(model);
        model.GrantingUser = DbContext.Users.First(u => u.UserId == CurrentUser.UserId.Id);
        model.LastModified = DateTime.UtcNow;

        var sequencer = new StepSequencer(model);
        var steps = sequencer.CreateStepCollectionFromWorkflow();
        var wfAuth = new WorkflowExecutionMessage(CurrentUser.UserId, steps);
        await wfAuth.Sign(CryptoService, CurrentUser.UserId, CurrentUser.Name);

        model.WorkflowAuthorization = wfAuth;

        await DbContext.SaveChangesAsync();
    }

    protected async Task DeleteWorkflow(WorkflowModel model)
    {
        var result = await DialogService.ShowMessageBox("Delete Workflow", "Do you want to delete this workflow? This action is permanent.", "Yes", "No");
        if (result.GetValueOrDefault(false))
        {
            DbContext.Workflows.Remove(model);
            await DbContext.SaveChangesAsync();
            Workflows.Remove(model);
        }
    }
}