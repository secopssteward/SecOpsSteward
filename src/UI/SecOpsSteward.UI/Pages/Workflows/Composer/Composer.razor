@layout DynamicMainLayout
@page "/workflows/composer/{WorkflowId:guid}"
@page "/workflows/composer"
@using SecOpsSteward.Plugins.Configurable
@using SecOpsSteward.Shared.DiscoveryWorkflow
@using SecOpsSteward.Shared.Messages
@using SecOpsSteward.Data.Models
@using SecOpsSteward.UI.Pages.Workflows.Composer
@using SecOpsSteward.UI.Pages.Workflows.Composer.Dialogs
@using SecOpsSteward.UI.Pages.Workflows.Composer.Nodes
@using SecOpsSteward.UI.Pages.Workflows.Composer.Panels
@using SecOpsSteward.UI.Shared

<PageSections @ref="_sections">
    <TitleBar>
        @if (Workflow == null)
        {
            <span>
            SecOps Steward - No Workflow Loaded
            </span>
        }
        else
        {
            <span>
            SecOps Steward - @Workflow.Name
            </span>
        }
	</TitleBar>
    <ButtonBar>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Inherit" OnClick="@(() => SaveChanges())" />
            @{ var dialogParams = new DialogParameters();
            dialogParams.Add(nameof(DiscoveryDialog.TemplateAdded), EventCallback.Factory.Create<RouteSegmentPossibility>(this, cb => { ComposerComponent.AddWorkflowDefinitionSteps(cb); })); 
        }
        <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" OnClick="@(() => DialogService.Show<DiscoveryDialog>("Discovery", dialogParams))" />
	</ButtonBar>
    <SecondaryDrawer>
        <AddComponentsDrawer
            AddPluginClicked="@AddPluginClicked"
            AddTemplateClicked="@AddTemplateClicked"
            ClearSelectionClicked="@ClearSelectionClicked"
            SelectedNode="@SelectedNode" />
	</SecondaryDrawer>
</PageSections>

<div id="workflowDiagram" Style="height:calc(100vh - 50px);">
	<WorkflowComposerComponent @ref="ComposerComponent" NodeSelected="@((n) => { SelectedNode = n; _sections.LayoutStateHasChanged(); })" />
</div>

@code {
    private PageSections _sections;
    protected WorkflowModel Workflow { get; set; }

    private WorkflowComposerComponent ComposerComponent;

    protected WorkflowComposerNode SelectedNode { get; set; }

    protected ConfigurableObjectParameterCollection SelectedNodeParameters { get; set; } = new ConfigurableObjectParameterCollection();
    protected ExecutionStepReceipt SelectedNodeStepReceipt { get; set; } = new ExecutionStepReceipt();

    [Parameter]
    public Guid? WorkflowId { get; set; }

    [Inject]
    protected NavigationManager NavManager { get; set; }

    [Inject]
    protected IDbContextFactory<SecOpsStewardDbContext> DbContextFactory { get; set; }

    private bool _loading = false;
    protected override async Task OnInitializedAsync()
    {
        if (WorkflowId == null) return;

        if (_loading) return;
        
        if (WorkflowId != null && Workflow != null && Workflow.WorkflowId == WorkflowId.GetValueOrDefault()) return;
        else
        {
            _loading = true;

            using (var cxt = DbContextFactory.CreateDbContext())
            {
                if (!DbContext.Plugins.Any())
                {
                    await DialogService.ShowMessageBox("Error", "No Packages have been installed.");
                    NavManager.NavigateTo("/manage/packages", true);
                    return;
                }

                Workflow = DbContext.Workflows.FirstOrDefault(w => w.WorkflowId == WorkflowId);

                DbContext.ChangeTracker.Clear();

                if (Workflow == null)
                {
                    Workflow = new WorkflowModel() { WorkflowId = WorkflowId.GetValueOrDefault(Guid.NewGuid()) };
                    if (!DbContext.Workflows.Local.Any(wf => wf.WorkflowId == Workflow.WorkflowId))
                        DbContext.Workflows.Add(Workflow);
                }

                await Task.Run(async () =>
                {
                    await Task.Delay(500);
                    await InvokeAsync(() => ComposerComponent.Load(Workflow));
                });
            }

            _loading = false;
        }
    }


    protected void AddPluginClicked(PluginMetadataModel p)
    {
        ComposerComponent.AddPackageNode(p);
    }

    protected async Task AddTemplateClicked(WorkflowTemplateModel t)
    {
        var dialogParams = new DialogParameters();
        dialogParams.Add(nameof(TemplateConfigurationDialog.WorkflowTemplate), t);

        var dialog = DialogService.Show<TemplateConfigurationDialog>("Configure Template Sequence", dialogParams);
        var dResult = await dialog.Result;
        if (dResult.Cancelled) { return; }
        var config = dResult.Data as ConfigurableObjectParameterCollection;

        ComposerComponent.AddWorkflowTemplate(t, config.AsDictionary());
    }
    protected void ClearSelectionClicked()
    {
        ComposerComponent.ClearSelection();
        SelectedNode = null;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        var updatedWorkflow = ComposerComponent.Save();

        Workflow.WorkflowJson = updatedWorkflow;
        await DbContext.SaveChangesAsync();

        Snackbar.Add("Workflow saved successfully", Severity.Success);
    }
}